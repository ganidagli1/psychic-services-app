// This is the Prisma schema for the psychic services application

// Datasource for PostgreSQL
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Generator for Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Enums
enum Role {
  BUYER
  SELLER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  IN_PROGRESS
  DELIVERED
  CANCELED
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  CAPTURED
  REFUNDED
  FAILED
}

enum AIProvider {
  OPENAI
  GEMINI
  DEEPSEEK
  CUSTOM
}

enum MessageSenderType {
  BUYER
  SELLER
  SYSTEM
}

// Models
model User {
  id                String   @id @default(cuid())
  name              String?
  email             String?  @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  orders            Order[]
}

model Account {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId          String
  provider         String
  providerAccountId String
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  user              User     @relation(fields: [userId], references: [id])
  userId            String
  expires           DateTime
}

model Category {
  id          String   @id @default(cuid())
  name        String
  description String?
  products    Product[]
}

model Product {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  price             Float
  category          Category @relation(fields: [categoryId], references: [id])
  categoryId       String
  variations        ProductVariation[]
  prompts           ProductPrompt[]
}

model ProductVariation {
  id          String @id @default(cuid())
  product    Product @relation(fields: [productId], references: [id])
  productId   String
  options     Json // for unlimited options
}

model ProductPrompt {
  id        String @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  productId String
  prompt    String
}

model Order {
  id               String   @id @default(cuid())
  user             User?    @relation(fields: [userId], references: [id])
  userId          String?
  orderStatus      OrderStatus
  items            OrderItem[]
  payment          Payment?
}

model OrderItem {
  id                String   @id @default(cuid())
  order             Order    @relation(fields: [orderId], references: [id])
  orderId          String
  product          Product   @relation(fields: [productId], references: [id])
  productId       String
  personalization   String?  @db.VarChar(1000) // 1000-char personalization field
}

model Message {
  id                String   @id @default(cuid())
  content           String
  senderType        MessageSenderType
  order             Order    @relation(fields: [orderId], references: [id])
  orderId          String
}

model Payment {
  id                String   @id @default(cuid())
  order             Order    @relation(fields: [orderId], references: [id])
  orderId          String
  status            PaymentStatus
  provider         String // Stripe/PayPal
}

model ProviderKey {
  id                String   @id @default(cuid())
  provider         AIProvider
  key              String
}